{"version":3,"sources":["components/Header.tsx","components/Home.tsx","components/DenseTable.tsx","components/GigList.tsx","components/GigDetails.tsx","services/ArrayService.ts","components/FormikAutocomplete.tsx","components/EditGigDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","classes","AppBar","position","Toolbar","Typography","className","Button","component","Link","to","size","Paper","title","Switch","checked","onChange","theme","addedTodayNonZero","backgroundColor","palette","success","main","paddingLeft","paddingRight","borderRadius","Home","useTheme","styles","useState","isLoading","setIsLoading","lastUpdated","Date","shows","showsInfo","setShowsInfo","isRecentlyAdded","show","thresholdInDays","addedDate","currentDate","millisecondsSinceAdded","getTime","millisecondsPerDay","thresholdInMilliseconds","result","useEffect","a","fetch","responseJson","json","response","filteredResponse","filter","id","fetchShowsInfo","eventsAddedTodayCount","length","haveEventsAddedToday","ThemeProvider","elevation","square","style","height","Grid","container","direction","justify","spacing","item","Backdrop","open","CircularProgress","color","alignItems","variant","fullWidth","Chip","label","date","eventDate","setHours","isFutureEvent","undefined","startIcon","StyledTableCell","withStyles","head","primary","contrastText","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","table","MyTextField","placeholder","props","useField","field","meta","errorText","error","touched","TextField","helperText","autoComplete","DenseTable","showPastEvents","days","dateRelevantShows","setDateRelevantShows","dateRangeShowFilter","addedDateRangeShowFilter","getDateRelevantShows","filteredShows","getRelevantShows","artistFilter","console","log","artists","reduce","previousArtistsResult","currentArtist","currentArtistIndex","currentArtistText","name","toLowerCase","indexOf","getArtistFilterShows","initialValues","onSubmit","values","relevantShows","errors","isSubmitting","handleChange","padding","type","TableContainer","Table","aria-label","TableHead","Hidden","smDown","TableBody","map","key","Math","random","toLocaleDateString","weekday","year","month","day","getDateFormatted","xs","artist","IconButton","venue","isSoldOut","warning","isCancelled","priceText","info","notes","GigList","useParams","showPastEventsParam","daysParam","createStyles","GigDetails","routeParams","find","getShowById","getDayName","alignContent","Card","CardContent","gutterBottom","marginTop","stageTime","videoUrl","href","CardActions","marginLeft","marginRight","display","flattenNestedArray","nestedArrays","concat","AnyAutocomplete","Autocomplete","createFilterOptions","FormikAutocomplete","textFieldProps","setFieldValue","form","fieldToTextField","event","newValue","inputValue","text","filterOptions","options","state","filtered","push","selectOnFocus","clearOnBlur","getOptionLabel","option","renderInput","MyCheckbox","otherProps","FormControlLabel","control","Checkbox","value","validationSchema","yup","required","of","EditGigDetails","history","knownVenues","setKnownVenues","knownArtists","setKnownArtists","setUniqueArtistNames","setUniqueVenueNames","sortStrings","b","showsVenuesNames","uniqueShowsVenueNames","Array","from","Set","sort","showsArtistNamesNested","showsArtistNames","uniqueShowsArtistNames","putShowsInfo","putMethod","method","headers","JSON","stringify","then","data","goBack","catch","err","submitShow","isNewShow","v4","toISOString","substring","existingShowIndex","findIndex","showCandidate","existingShow","nextShow","trim","nextArtist","nextShows","nextShowsInfo","lhs","rhs","lhsDate","rhsDate","lhsTime","rhsTime","sortShows","margin","setSubmitting","resetForm","handleBlur","handleSubmit","utils","DateFnsUtils","KeyboardDatePicker","autoOk","getUTCDate","disableToolbar","format","freeSolo","autoSelect","arrayHelpers","Badge","badgeContent","showZero","onClick","fontWeight","index","nameName","stageTimeName","sm","artistName","remove","paddingTop","disabled","App","createMuiTheme","secondary","basename","process","path","exact","render","location","match","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.79902ea0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Switch,\r\n  Paper,\r\n  // IconButton,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>\r\n          Gigs of Note\r\n        </Typography>\r\n        <Button component={Link} to=\"/\" size=\"small\">\r\n          <HomeIcon />\r\n        </Button>\r\n        <Button\r\n          size=\"small\"\r\n          component={Link}\r\n          to={\"/editgigdetails/\"}\r\n\r\n        >\r\n          <PlaylistAddIcon />\r\n        </Button>\r\n\r\n        <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch\r\n          checked={isDarkMode}\r\n          onChange={() => setIsDarkMode(!isDarkMode)}\r\n        />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  ThemeProvider,\r\n  Button,\r\n  Backdrop,\r\n  CircularProgress,\r\n  Chip,\r\n  useTheme,\r\n  Theme,\r\n} from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles<Theme>((theme) => ({\r\n  addedTodayNonZero: {\r\n    backgroundColor: theme.palette.success.main,\r\n    paddingLeft: 50,\r\n    paddingRight: 50,\r\n    borderRadius: 5,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Home: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const theme = useTheme();\r\n  const styles = useStyles();\r\n\r\n  // const [isDarkMode, setIsDarkMode] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [],\r\n  });\r\n\r\n  // const theme = createMuiTheme({\r\n  //     palette: {\r\n  //         type: isDarkMode ? \"dark\" : \"light\",\r\n  //         primary: {\r\n  //             main: '#0b5994',\r\n  //         },\r\n  //         secondary: {\r\n  //             main: '#1d83c6',\r\n  //         },\r\n  //     },\r\n  // });\r\n\r\n  const isRecentlyAdded = (show: Show, thresholdInDays = 1) => {\r\n    if (!show.addedDate) {\r\n      return false;\r\n    }\r\n\r\n    const addedDate = new Date(show.addedDate);\r\n    const currentDate = new Date();\r\n\r\n    const millisecondsSinceAdded = currentDate.getTime() - addedDate.getTime();\r\n\r\n    const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n    const thresholdInMilliseconds = thresholdInDays * millisecondsPerDay;\r\n\r\n    const result = millisecondsSinceAdded < thresholdInMilliseconds;\r\n\r\n    return result;\r\n  };\r\n\r\n  const isFutureEvent = (show: Show) => {\r\n    if (!show.date) {\r\n      return false;\r\n    }\r\n\r\n    const eventDate = new Date(show.date);\r\n    eventDate.setHours(23, 59, 0, 0);\r\n\r\n    let currentDate = new Date();\r\n    currentDate.setHours(0, 0, 0, 0);\r\n\r\n    return eventDate >= currentDate;\r\n  };\r\n\r\n  const getAllShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows;\r\n  };\r\n\r\n  const getFutureShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows.filter((show) => isFutureEvent(show));\r\n  };\r\n\r\n  const getAddedTodayShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows.filter((show) => {\r\n      return isRecentlyAdded(show, 1);\r\n    });\r\n  };\r\n\r\n  const getAddedWithin3DaysShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows.filter((show) => {\r\n      return isRecentlyAdded(show, 3);\r\n    });\r\n  };\r\n\r\n  const getAddedWithin7DaysShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows.filter((show) => {\r\n      return isRecentlyAdded(show, 7);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      // const url = `https://show01-cd72d.firebaseio.com/.json?print=pretty`;\r\n      const url = `https://gigs01-default-rtdb.europe-west1.firebasedatabase.app/.json?print=pretty`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      // 36975dc3-5479-468b-abd2-b5407c01a695\r\n      const isCleanupRequired = true;\r\n\r\n      if (isCleanupRequired) {\r\n        const filteredResponse: ShowsInfo = {\r\n          lastUpdated: response.lastUpdated,\r\n          shows: [...response.shows.filter(show => show.id !== \"36975dc3-5479-468b-abd2-b5407c01a695\")]\r\n        };\r\n\r\n        setShowsInfo(filteredResponse);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      setShowsInfo(response);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  const eventsAddedTodayCount = getAddedTodayShows().length;\r\n  const haveEventsAddedToday = eventsAddedTodayCount > 0;\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper elevation={0} square style={{ height: \"100vh\" }}>\r\n        <Grid container direction=\"column\" justify=\"center\" spacing={4}>\r\n          <Grid item>\r\n            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n          </Grid>\r\n          {isLoading ? (\r\n            <Backdrop open={true}>\r\n              <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n          ) : (\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              spacing={2}\r\n              justify=\"center\"\r\n              alignItems=\"stretch\"\r\n            >\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  component={Link}\r\n                  to={\"/giglist/false\"}\r\n                  fullWidth\r\n                >\r\n                  <span>Future Events</span>&nbsp;{\" \"}\r\n                  <Chip\r\n                    variant=\"default\"\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                    label={getFutureShows().length}\r\n                  />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/giglist/false/1\"}\r\n                  fullWidth\r\n                >\r\n                  <div\r\n                    className={\r\n                      haveEventsAddedToday\r\n                        ? styles.addedTodayNonZero\r\n                        : undefined\r\n                    }\r\n                  >\r\n                    Added Today&nbsp;\r\n                    <Chip\r\n                      variant=\"default\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      label={eventsAddedTodayCount}\r\n                    />\r\n                  </div>\r\n                  {/* {isLoading ? null : <span>&nbsp;({getAddedTodayShows().length})</span>} */}\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/giglist/false/3\"}\r\n                  fullWidth\r\n                >\r\n                  <span>Added In Last 3 Days</span>&nbsp;\r\n                  {/* {isLoading ? null : <span>&nbsp;({getAddedWithin3DaysShows().length})</span>} */}\r\n                  <Chip\r\n                    variant=\"default\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    label={getAddedWithin3DaysShows().length}\r\n                  />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/giglist/false/7\"}\r\n                  fullWidth\r\n                >\r\n                  <span>Added In Last 7 Days</span>&nbsp;\r\n                  {/* {isLoading ? null : <span>&nbsp;({getAddedWithin7DaysShows().length})</span>} */}\r\n                  <Chip\r\n                    variant=\"default\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    label={getAddedWithin7DaysShows().length}\r\n                  />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/giglist/true/-1\"}\r\n                  fullWidth\r\n                >\r\n                  <span>All Events</span>&nbsp;{\" \"}\r\n                  <Chip\r\n                    variant=\"default\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    label={getAllShows().length}\r\n                  />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/editgigdetails/\"}\r\n                  fullWidth\r\n                  startIcon={<PlaylistAddIcon />}\r\n                >\r\n                  <span>Add</span>&nbsp;\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport DetailsIcon from \"@material-ui/icons/Details\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\nimport {\r\n  CircularProgress,\r\n  Backdrop,\r\n  Chip,\r\n  Grid,\r\n  Hidden,\r\n  // Button,\r\n  IconButton,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form, useField, FieldAttributes } from \"formik\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    // backgroundColor: theme.palette.common.black,\r\n    // color: theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    // minWidth: 650,\r\n    // maxWidth: 500\r\n  },\r\n});\r\n\r\nconst getDayName = (date: Date) => {\r\n  return new Date(date).toLocaleDateString(\"en-GB\", { weekday: \"short\" });\r\n};\r\n\r\nconst getDateFormatted = (date: Date) => {\r\n  const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\r\n\r\n  return new Date(date).toLocaleDateString(\"en-GB\", options);\r\n};\r\n\r\ninterface Props {\r\n  showPastEvents: boolean;\r\n\r\n  days?: number;\r\n}\r\n\r\ninterface FormValues {\r\n  artistFilter: string;\r\n}\r\n\r\nconst MyTextField: React.FC<FieldAttributes<{}>> = ({\r\n  placeholder,\r\n  ...props\r\n}) => {\r\n  const [field, meta] = useField<{}>(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n  return (\r\n    <TextField\r\n      placeholder={placeholder}\r\n      {...field}\r\n      helperText={errorText}\r\n      autoComplete=\"off\"\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\nconst DenseTable: React.FC<Props> = (props) => {\r\n  // console.log(\"DenseTable : Start Render\");\r\n\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [showPastEvents] = useState(props.showPastEvents);\r\n  const [days] = useState(props.days);\r\n  // const [artistFilter, setArtistFilter] = useState(\"\");\r\n  const [dateRelevantShows, setDateRelevantShows] = useState<Show[]>([]);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [\r\n      // {\r\n      //     id: \"1\",\r\n      //     venue: \"Fleece\",\r\n      //     artists: [\r\n      //         {\r\n      //             name: \"Chuck P\"\r\n      //         }\r\n      //     ],\r\n      //     isCancelled: false,\r\n      //     isSoldOut: false,\r\n      //     date: new Date()\r\n      // }\r\n    ],\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //     // setDateRelevantShows(getRelevantShows(showsInfo.shows));\r\n  //     console.log(\"useEffect:artistFilter\");\r\n  // }, [artistFilter]);\r\n\r\n  const isRecentlyAdded = (show: Show, thresholdInDays = 1) => {\r\n    if (!show.addedDate) {\r\n      return false;\r\n    }\r\n\r\n    const addedDate = new Date(show.addedDate);\r\n    const currentDate = new Date();\r\n\r\n    const millisecondsSinceAdded = currentDate.getTime() - addedDate.getTime();\r\n\r\n    const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n    const thresholdInMilliseconds = thresholdInDays * millisecondsPerDay;\r\n\r\n    const result = millisecondsSinceAdded < thresholdInMilliseconds;\r\n\r\n    return result;\r\n  };\r\n\r\n  // const getInDateRangeShows = (): Show[] => {\r\n  //     if (!showsInfo) {\r\n  //         return [];\r\n  //     }\r\n\r\n  //     const { shows } = showsInfo;\r\n\r\n  //     if (showPastEvents) {\r\n  //         return shows;\r\n  //     }\r\n\r\n  //     const results = shows.filter(dateRangeShowFilter);\r\n\r\n  //     return results;\r\n  // }\r\n\r\n  const isFutureEvent = (show: Show) => {\r\n    if (!show.date) {\r\n      return false;\r\n    }\r\n\r\n    const eventDate = new Date(show.date);\r\n    eventDate.setHours(23, 59, 0, 0);\r\n\r\n    let currentDate = new Date();\r\n    currentDate.setHours(0, 0, 0, 0);\r\n\r\n    return eventDate >= currentDate;\r\n  };\r\n\r\n  const dateRangeShowFilter = (show: Show) => {\r\n    let willShowEvent = false;\r\n\r\n    if (showPastEvents) {\r\n      willShowEvent = true;\r\n    } else {\r\n      willShowEvent = isFutureEvent(show);\r\n    }\r\n\r\n    return willShowEvent;\r\n  };\r\n\r\n  const addedDateRangeShowFilter = (show: Show) => {\r\n    let willShowEvent = false;\r\n\r\n    if (days === -1) {\r\n      willShowEvent = true;\r\n    } else {\r\n      willShowEvent = isRecentlyAdded(show, days);\r\n    }\r\n\r\n    return willShowEvent;\r\n  };\r\n\r\n  // const getInAddedDateRangeShows = (shows: Show[]): Show[] => {\r\n  //     if (!shows) {\r\n  //         return [];\r\n  //     }\r\n\r\n  //     // const { shows } = showsInfo;\r\n\r\n  //     if (days === -1) {\r\n  //         return shows;\r\n  //     }\r\n\r\n  //     const inEventDateRangeShows = shows.filter(dateRangeShowFilter);\r\n\r\n  //     const results = inEventDateRangeShows.filter(show => addedDateRangeShowFilter(show));\r\n\r\n  //     return results;\r\n  // }\r\n\r\n  const getArtistFilterShows = (artistFilter: string): Show[] => {\r\n    //     const results = this.inDateRangeShows.filter(show => {\r\n    console.log(\"getArtistFilterShows\");\r\n\r\n    if (!artistFilter) {\r\n      return dateRelevantShows;\r\n    }\r\n\r\n    const results = dateRelevantShows.filter((show) => {\r\n      if (!artistFilter) {\r\n        return true;\r\n      }\r\n\r\n      // if (artistFilter.length < 2) {\r\n      //     return true;\r\n      // }\r\n\r\n      const showArtistsText = show.artists.reduce(\r\n        (previousArtistsResult, currentArtist, currentArtistIndex) => {\r\n          const currentArtistText = currentArtist.name;\r\n\r\n          return currentArtistIndex === 0\r\n            ? currentArtistText\r\n            : previousArtistsResult + \" \" + currentArtistText;\r\n        },\r\n        \"\"\r\n      );\r\n\r\n      return (\r\n        showArtistsText.toLowerCase().indexOf(artistFilter.toLowerCase()) > -1\r\n      );\r\n    });\r\n\r\n    return results;\r\n  };\r\n\r\n  const getDateRelevantShows = (shows: Show[]): Show[] => {\r\n    let filteredShows = shows;\r\n\r\n    filteredShows = filteredShows.filter(dateRangeShowFilter);\r\n\r\n    if (days !== -1) {\r\n      filteredShows = filteredShows.filter(addedDateRangeShowFilter);\r\n    }\r\n\r\n    return filteredShows;\r\n  };\r\n\r\n  //   const getRelevantShows = (shows: Show[]): Show[] => {\r\n  //     // if (!shows) {\r\n  //     //     return [];\r\n  //     // }\r\n\r\n  //     // const { shows } = showsInfo;\r\n\r\n  //     let filteredShows = shows;\r\n\r\n  //     filteredShows = filteredShows.filter(dateRangeShowFilter);\r\n\r\n  //     if (days !== -1) {\r\n  //       filteredShows = filteredShows.filter(addedDateRangeShowFilter);\r\n  //     }\r\n\r\n  //     if (artistFilter) {\r\n  //       filteredShows = getArtistFilterShows(filteredShows);\r\n  //     }\r\n  //     return filteredShows;\r\n  //   };\r\n\r\n  const getRelevantShows = (artistFilter: string): Show[] => {\r\n    let filteredShows = dateRelevantShows;\r\n\r\n    if (artistFilter) {\r\n      filteredShows = getArtistFilterShows(artistFilter);\r\n    }\r\n\r\n    return filteredShows;\r\n  };\r\n\r\n  //   const handleArtistFilterChange = (e: React.ChangeEvent<any>): void => {\r\n  //     console.log(e.target.value);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      // const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n      const url = `https://gigs01-default-rtdb.europe-west1.firebasedatabase.app/.json`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      // 36975dc3-5479-468b-abd2-b5407c01a695\r\n      const isCleanupRequired = true;\r\n\r\n      if (isCleanupRequired) {\r\n        const filteredResponse: ShowsInfo = {\r\n          lastUpdated: response.lastUpdated,\r\n          shows: [...response.shows.filter(show => show.id !== \"36975dc3-5479-468b-abd2-b5407c01a695\")]\r\n        };\r\n\r\n        setShowsInfo(filteredResponse);\r\n        setDateRelevantShows(getDateRelevantShows(filteredResponse.shows));\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      setShowsInfo(response);\r\n      setDateRelevantShows(getDateRelevantShows(response.shows));\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  return isLoading ? (\r\n    <Backdrop open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  ) : (\r\n    <Grid container direction=\"column\">\r\n      <Grid item>\r\n        <Formik initialValues={{ artistFilter: \"\" }} onSubmit={() => { }}>\r\n          {({ values, errors, isSubmitting, handleChange }) => {\r\n            // console.table(values);\r\n\r\n            // if (values.artistFilter && values.artistFilter.length > 1) {\r\n            //     setTimeout(function () {\r\n            //         setArtistFilter(values.artistFilter);\r\n            //     }, 30);\r\n            // }\r\n\r\n            const relevantShows = getRelevantShows(values.artistFilter);\r\n\r\n            return (\r\n              <Grid container direction=\"column\">\r\n                <Grid item container>\r\n                  <Grid item>\r\n                    <Form style={{ padding: \"0 30px 15px 15px\" }}>\r\n                      <MyTextField\r\n                        placeholder=\"artist filter\"\r\n                        name=\"artistFilter\"\r\n                        type=\"input\"\r\n                      />\r\n                    </Form>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Chip\r\n                      variant=\"default\"\r\n                      color=\"secondary\"\r\n                      size=\"small\"\r\n                      label={relevantShows.length}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TableContainer component={Paper} square>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size=\"small\"\r\n                      aria-label=\"a dense table\"\r\n                    >\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <Hidden smDown>\r\n                            <StyledTableCell>Day</StyledTableCell>\r\n                          </Hidden>\r\n                          <StyledTableCell>Date</StyledTableCell>\r\n                          <StyledTableCell>Artists</StyledTableCell>\r\n                          <StyledTableCell>Venue</StyledTableCell>\r\n                          <StyledTableCell>Actions</StyledTableCell>\r\n                          <StyledTableCell>&nbsp;</StyledTableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {/* {showsInfo.shows.filter(show => new Date(show.date) >= new Date()).map((show) => ( */}\r\n                        {relevantShows.map((show) => (\r\n                          <StyledTableRow key={Math.random()}>\r\n                            <Hidden smDown>\r\n                              <StyledTableCell>\r\n                                {getDayName(show.date)}\r\n                              </StyledTableCell>\r\n                            </Hidden>\r\n                            <StyledTableCell>\r\n                              {getDateFormatted(show.date)}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell>\r\n                              {/* <pre>\r\n                                          {JSON.stringify(show, null, 2)}\r\n                                      </pre> */}\r\n                              <Grid container>\r\n                                <Grid item xs={11}>\r\n                                  {show.artists.map((artist) => {\r\n                                    return (\r\n                                      <p key={`${show.id}.${artist.name}`}>\r\n                                        {artist.name}\r\n\r\n                                        {/* <span *ngIf=\"artist.stageTime\"\r\n                                                class=\"badge badge-pill badge-primary\"\r\n                                                style=\"margin-right: 10px;\"\r\n                                                title=\"Stage Time\">\r\n                                                {{artist.stageTime}}\r\n                                              </span>\r\n                                \r\n                                              <a *ngIf=\"artist.videoUrl\" [attr.href]=\"artist.videoUrl\">\r\n                                                <span\r\n                                                  class=\"badge badge-danger\"\r\n                                                  style=\"margin-right: 10px;\">\r\n                                                  Video\r\n                                                </span>\r\n                                              </a> */}\r\n                                      </p>\r\n                                    );\r\n                                  })}\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                  <IconButton\r\n                                    aria-label=\"details\"\r\n                                    component={Link}\r\n                                    to={`/gigdetails/${show.id}`}\r\n                                  >\r\n                                    <DetailsIcon />\r\n                                  </IconButton>\r\n                                </Grid>\r\n                              </Grid>\r\n                            </StyledTableCell>\r\n                            <StyledTableCell>{show.venue}</StyledTableCell>\r\n                            <StyledTableCell>\r\n                              {/* <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                component={Link}\r\n                                to={`/editgigdetails/${show.id}`}\r\n                              >\r\n                                <span>Edit</span>\r\n                              </Button> */}\r\n                              <IconButton\r\n                                aria-label=\"edit\"\r\n                                component={Link}\r\n                                to={`/editgigdetails/${show.id}`}\r\n                              >\r\n                                <EditIcon />\r\n                              </IconButton>\r\n                            </StyledTableCell>\r\n                            <StyledTableCell>\r\n                              <Grid container direction=\"column\" spacing={1}>\r\n                                {show.isSoldOut && (\r\n                                  <Grid item>\r\n                                    <Chip\r\n                                      style={{\r\n                                        backgroundColor:\r\n                                          theme.palette.warning.main,\r\n                                        color:\r\n                                          theme.palette.warning.contrastText,\r\n                                      }}\r\n                                      size=\"small\"\r\n                                      label=\"Sold Out\"\r\n                                    />\r\n                                  </Grid>\r\n                                )}\r\n                                {show.isCancelled && (\r\n                                  <Grid item>\r\n                                    <Chip\r\n                                      style={{\r\n                                        backgroundColor:\r\n                                          theme.palette.error.main,\r\n                                        color: theme.palette.error.contrastText,\r\n                                      }}\r\n                                      size=\"small\"\r\n                                      label=\"Cancelled\"\r\n                                    />\r\n                                  </Grid>\r\n                                )}\r\n                                {show.priceText &&\r\n                                  show.priceText.indexOf(\"£\") === 0 && (\r\n                                    <Grid item>\r\n                                      <Chip\r\n                                        style={{\r\n                                          backgroundColor:\r\n                                            theme.palette.info.main,\r\n                                          color:\r\n                                            theme.palette.info.contrastText,\r\n                                        }}\r\n                                        size=\"small\"\r\n                                        label={show.priceText}\r\n                                      />\r\n                                    </Grid>\r\n                                  )}\r\n                                {show.notes && (\r\n                                  <Grid item>\r\n                                    <span\r\n                                      style={\r\n                                        {\r\n                                          // backgroundColor: theme.palette.info.main,\r\n                                          // color: theme.palette.info.contrastText\r\n                                        }\r\n                                      }\r\n                                    >\r\n                                      {show.notes}\r\n                                    </span>\r\n                                  </Grid>\r\n                                )}\r\n                              </Grid>\r\n\r\n                              {/* \r\n      \r\n                  <span *ngIf=\"show.priceText && show.priceText.indexOf('£') === 0\"\r\n                    class=\"badge badge-info\" style=\"margin-right: 10px;\">\r\n                    {{show.priceText}}\r\n                  </span>\r\n      \r\n                  <span *ngIf=\"show.notes\" style=\"margin-right: 10px;\">{{show.notes}}</span> */}\r\n                            </StyledTableCell>\r\n                          </StyledTableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DenseTable;\r\n","import React from \"react\";\r\nimport { Paper, Grid, ThemeProvider, useTheme } from \"@material-ui/core\";\r\n\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\nimport DenseTable from \"./DenseTable\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n\r\n  // match?: any;\r\n}\r\n\r\n// interface RouterProps {\r\n//     match: any;\r\n// }\r\n\r\n// type PropsWithRouterParams = Props & RouterProps;\r\n\r\nconst GigList: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  // const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  // const theme = createMuiTheme({\r\n  //     palette: {\r\n  //         type: isDarkMode ? \"dark\" : \"light\",\r\n\r\n  //         primary: {\r\n  //             main: '#0b5994',\r\n  //         },\r\n  //         secondary: {\r\n  //             main: '#1d83c6',\r\n  //         },\r\n  //     },\r\n  // });\r\n\r\n  const { showPastEvents, days } = useParams();\r\n  const showPastEventsParam = showPastEvents === \"true\";\r\n  const daysParam = days === undefined ? -1 : +days;\r\n\r\n  // console.log(showPastEvents, showPastEventsParam);\r\n  // const propsAsAny = props as any;\r\n  // const { isDarkMode, setIsDarkMode } = propsAsAny;\r\n  // const match = propsAsAny.match;\r\n  // const showPastEvents = match && match.params && match.params.showPastEvents;\r\n\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper elevation={0} square style={{ height: \"100%\" }}>\r\n        <Grid container direction=\"column\" spacing={1}>\r\n          <Grid item>\r\n            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n          </Grid>\r\n          <Grid item container justify=\"center\">\r\n            <DenseTable showPastEvents={showPastEventsParam} days={daysParam} />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default GigList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useTheme,\r\n  Grid,\r\n  Chip,\r\n  Backdrop,\r\n  CircularProgress,\r\n  IconButton,\r\n  // Container,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n// import Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { ShowsInfo } from \"../models/models\";\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  return createStyles({\r\n    root: {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n  });\r\n});\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\nconst GigDetails: React.FC = () => {\r\n  const routeParams = useParams<RouteParams>();\r\n\r\n  const classes = useStyles();\r\n  // const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  const theme = useTheme();\r\n  // const classes = useStyles();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [id] = useState(routeParams.id);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      // https://firebase.google.com/docs/firestore/use-rest-api#making_rest_calls\r\n      // https://firebase.google.com/docs/reference/rest/database/\r\n      // const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n      const url = `https://gigs01-default-rtdb.europe-west1.firebasedatabase.app/.json`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      setShowsInfo(response);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  const getShowById = (id: string) => {\r\n    const idMatch = showsInfo.shows.find((show) => show.id && show.id === id);\r\n\r\n    return idMatch;\r\n  };\r\n\r\n  const show = getShowById(id);\r\n\r\n  const getDayName = (date: Date) => {\r\n    return new Date(date).toLocaleDateString(\"en-GB\", { weekday: \"short\" });\r\n  };\r\n\r\n  const getDateFormatted = (date: Date) => {\r\n    const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\r\n\r\n    return new Date(date).toLocaleDateString(\"en-GB\", options);\r\n  };\r\n\r\n  return isLoading ? (\r\n    <Backdrop open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  ) : (\r\n    // <Container maxWidth={false}>\r\n    <Typography\r\n      component=\"div\"\r\n      className={classes.root}\r\n      style={{ height: \"100vh\" }}\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"stretch\"\r\n        alignContent=\"stretch\"\r\n        style={{ height: \"100%\" }}\r\n      >\r\n        <Grid item xs={12}>\r\n          {!show && <h1>Event not found</h1>}\r\n\r\n          {show && (\r\n            <Card className={classes.root} variant=\"outlined\" square>\r\n              <CardContent>\r\n                <Typography\r\n                  className={classes.title}\r\n                  color=\"textSecondary\"\r\n                  gutterBottom\r\n                >\r\n                  {getDayName(show.date)}, {getDateFormatted(show.date)}\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  {show.artists[0].name}\r\n                  <IconButton\r\n                    aria-label=\"edit\"\r\n                    component={Link}\r\n                    to={`/editgigdetails/${show.id}`}\r\n                  >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">{show.venue}</Typography>\r\n                <Typography\r\n                  variant=\"body2\"\r\n                  component=\"div\"\r\n                  style={{ marginTop: 15 }}\r\n                >\r\n                  <Typography color=\"textSecondary\">Artists</Typography>\r\n                  <Grid container direction=\"column\" spacing={1}>\r\n                    {show.artists.map((artist) => {\r\n                      return (\r\n                        <Grid item container key={`${show.id}.${artist.name}`}>\r\n                          <Grid item xs={4}>\r\n                            {artist.name}\r\n                          </Grid>\r\n\r\n                          <Grid item xs={4}>\r\n                            {artist.stageTime && (\r\n                              <Chip\r\n                                style={{\r\n                                  backgroundColor: theme.palette.info.main,\r\n                                  color: theme.palette.info.contrastText,\r\n                                }}\r\n                                size=\"small\"\r\n                                label={artist.stageTime}\r\n                              />\r\n                            )}\r\n                          </Grid>\r\n\r\n                          <Grid item xs={4}>\r\n                            {artist.videoUrl && (\r\n                              <a href={artist.videoUrl}>\r\n                                <Chip\r\n                                  style={{\r\n                                    backgroundColor: theme.palette.info.main,\r\n                                    color: theme.palette.info.contrastText,\r\n                                  }}\r\n                                  size=\"small\"\r\n                                  label=\"Video\"\r\n                                />\r\n                              </a>\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n                      );\r\n                    })}\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    spacing={1}\r\n                    style={{ marginTop: 10 }}\r\n                  >\r\n                    {show.isSoldOut && (\r\n                      <Grid item>\r\n                        <Chip\r\n                          style={{\r\n                            backgroundColor: theme.palette.warning.main,\r\n                            color: theme.palette.warning.contrastText,\r\n                          }}\r\n                          size=\"small\"\r\n                          label=\"Sold Out\"\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                    {show.isCancelled && (\r\n                      <Grid item>\r\n                        <Chip\r\n                          style={{\r\n                            backgroundColor: theme.palette.error.main,\r\n                            color: theme.palette.error.contrastText,\r\n                          }}\r\n                          size=\"small\"\r\n                          label=\"Cancelled\"\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                    {show.priceText && show.priceText.indexOf(\"£\") === 0 && (\r\n                      <Grid item>\r\n                        <Chip\r\n                          style={{\r\n                            backgroundColor: theme.palette.info.main,\r\n                            color: theme.palette.info.contrastText,\r\n                          }}\r\n                          size=\"small\"\r\n                          label={show.priceText}\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                    {show.notes && (\r\n                      <Grid item>\r\n                        <span\r\n                          style={\r\n                            {\r\n                              // backgroundColor: theme.palette.info.main,\r\n                              // color: theme.palette.info.contrastText\r\n                            }\r\n                          }\r\n                        >\r\n                          {show.notes}\r\n                        </span>\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                {/* <Button size=\"small\">Learn More</Button> */}\r\n                <Typography variant=\"body2\" component=\"div\">\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    style={{ marginLeft: 10, marginRight: 10 }}\r\n                  >\r\n                    {show.addedDate && (\r\n                      <Grid item>\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          display=\"block\"\r\n                          gutterBottom\r\n                        >\r\n                          Added: {getDayName(show.addedDate)},{\" \"}\r\n                          {getDateFormatted(show.addedDate)}\r\n                        </Typography>\r\n                      </Grid>\r\n                    )}\r\n                    {show.id && (\r\n                      <Grid item>\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          display=\"block\"\r\n                          gutterBottom\r\n                        >\r\n                          Id: {show.id}\r\n                        </Typography>\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                </Typography>\r\n              </CardActions>\r\n            </Card>\r\n          )}\r\n\r\n          {/* <pre>{JSON.stringify(getShowById(id), null, 2)}</pre> */}\r\n        </Grid>\r\n      </Grid>\r\n    </Typography>\r\n    // </Container>\r\n  );\r\n};\r\n\r\nexport default GigDetails;\r\n","const flattenNestedArray = <T>(nestedArrays: T[][]): T[] => {\r\n  //   const flat: T[] = [].concat(...array);\r\n  const flattenedArray = ([] as T[]).concat(...nestedArrays);\r\n\r\n  return flattenedArray;\r\n\r\n  //   return flattenedArray.some(Array.isArray)\r\n  //     ? flattenNestedArray(flattenedArray)\r\n  //     : flattenedArray;\r\n};\r\n\r\nexport default flattenNestedArray;\r\n","import { TextField, TextFieldProps } from \"@material-ui/core\";\r\nimport {\r\n  Autocomplete,\r\n  // AutocompleteInputChangeReason,\r\n  AutocompleteProps,\r\n  createFilterOptions,\r\n  FilterOptionsState,\r\n} from \"@material-ui/lab\";\r\nimport { FieldProps } from \"formik\";\r\nimport { fieldToTextField } from \"formik-material-ui\";\r\nimport React from \"react\";\r\n\r\nconst AnyAutocomplete = Autocomplete as any;\r\n\r\nexport interface FormikAutocompleteProps<\r\n  V extends any = any,\r\n  FormValues extends any = any\r\n  > extends FieldProps<V, FormValues>, AutocompleteProps<V> {\r\n  textFieldProps: TextFieldProps;\r\n}\r\n\r\n// const noOp = () => { };\r\n\r\nexport interface StringOptionType {\r\n  inputValue?: string;\r\n  text: string;\r\n}\r\n\r\nconst filter = createFilterOptions<StringOptionType>();\r\n\r\nconst FormikAutocomplete = <V extends any = any, FormValues extends any = any>({\r\n  textFieldProps,\r\n  ...props\r\n}: FormikAutocompleteProps<V, FormValues>) => {\r\n  // const [value, setValue] = React.useState<StringOptionType | null>(null);\r\n\r\n  const {\r\n    // form: { setTouched, setFieldValue, touched },\r\n    form: { setFieldValue },\r\n  } = props;\r\n  const { error, helperText, ...field } = fieldToTextField(props as any);\r\n  const { name } = field;\r\n  // const onInputChangeDefault = props.onInputChange ?? noOp;\r\n  // const onInputChange = !props.freeSolo\r\n  //   ? props.onInputChange\r\n  //   : (\r\n  //       event: React.ChangeEvent<{}>,\r\n  //       value: string,\r\n  //       reason: AutocompleteInputChangeReason\r\n  //     ) => {\r\n  //       setFieldValue(name!, value);\r\n  //       onInputChangeDefault(event, value, reason);\r\n  //     };\r\n\r\n  return (\r\n    <AnyAutocomplete\r\n      {...props}\r\n      {...field}\r\n      // onChange={(_: any, value: any, reason: string) =>\r\n      //   setFieldValue(name!, value)\r\n      // }\r\n      onChange={(event: any, newValue: StringOptionType | null) => {\r\n        // Create a new value from the user input\r\n        if (newValue && newValue.inputValue) {\r\n          setFieldValue(name!, newValue.inputValue);\r\n          return;\r\n        }\r\n\r\n        setFieldValue(name!, newValue ? newValue.text || \"\" : \"\");\r\n      }}\r\n      filterOptions={(\r\n        options: StringOptionType[],\r\n        state: FilterOptionsState<StringOptionType>\r\n      ) => {\r\n        const filtered = filter(options, state) as StringOptionType[];\r\n\r\n        // Suggest the creation of a new value\r\n        if (state.inputValue !== \"\") {\r\n          filtered.push({\r\n            inputValue: state.inputValue,\r\n            text: `Add \"${state.inputValue}\"`,\r\n          });\r\n        }\r\n\r\n        return filtered;\r\n      }}\r\n      selectOnFocus\r\n      clearOnBlur\r\n      getOptionLabel={(option: StringOptionType) => {\r\n        // console.log(\"getOptionLabel\", option);\r\n        // Value selected with enter, right from the input\r\n        if (typeof option === \"string\") {\r\n          // console.log(\"getOptionLabel : returning\", option);\r\n          return option;\r\n        }\r\n        // Add \"xxx\" option created dynamically\r\n        // if (option.inputValue) {\r\n        //   console.log(\"getOptionLabel : returning\", option.inputValue);\r\n        //   return option.text;\r\n        // }\r\n        // Regular option\r\n        // console.log(\"getOptionLabel : returning\", option.text);\r\n        return option.text || \"\";\r\n      }}\r\n      // onInputChange={onInputChange}\r\n      // onBlur={() => setTouched({ ...touched, [name!]: true })}\r\n      renderInput={(props: any) => (\r\n        <TextField\r\n          {...props}\r\n          {...textFieldProps}\r\n          helperText={helperText}\r\n          error={error}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FormikAutocomplete;\r\n","import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  Formik,\r\n  Field,\r\n  Form,\r\n  useField,\r\n  FieldAttributes,\r\n  FieldArray,\r\n} from \"formik\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Checkbox,\r\n  // Radio,\r\n  FormControlLabel,\r\n  Backdrop,\r\n  CircularProgress,\r\n  IconButton,\r\n  Badge,\r\n  Typography,\r\n  Hidden,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  // KeyboardTimePicker,\r\n  //   KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport {\r\n  // TimePicker,\r\n  // DatePicker,\r\n  // DateTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"formik-material-ui-pickers\";\r\n// import Autocomplete, { RenderInputParams } from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n// import Header from \"./components/Header\";\r\nimport * as yup from \"yup\";\r\n\r\n// import { blue } from \"@material-ui/core/colors\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport { useParams, RouteComponentProps } from \"react-router-dom\";\r\nimport { v4 } from \"uuid\";\r\n\r\nimport Header from \"./Header\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\n// import top100Films from \"../models/top100Films\";\r\nimport flattenNestedArray from \"../services/ArrayService\";\r\nimport FormikAutocomplete, { StringOptionType } from \"./FormikAutocomplete\";\r\n\r\n// type MyRadioProps = { label: string } & FieldAttributes<{}>;\r\n\r\n// // Does not work in pre-Chromium MS Edge\r\n// // const MyRadio: React.FC<MyRadioProps> = ({ label, ...props }) => {\r\n// //   const [field] = useField<{}>(props);\r\n\r\n// //   return <FormControlLabel {...field} control={<Radio />} label={label} />;\r\n// // };\r\n\r\n// const MyRadio: React.FC<MyRadioProps> = (props) => {\r\n//   const { label, ...otherProps } = props;\r\n//   const [field] = useField<{}>(otherProps);\r\n\r\n//   return <FormControlLabel {...field} control={<Radio />} label={label} />;\r\n// };\r\n\r\ntype MyCheckBoxProps = { label: string } & FieldAttributes<{}>;\r\n\r\nconst MyCheckbox: React.FC<MyCheckBoxProps> = (props) => {\r\n  const { label, ...otherProps } = props;\r\n  const [field] = useField<{}>(otherProps);\r\n\r\n  return <FormControlLabel {...field} control={<Checkbox />} label={label} />;\r\n};\r\n\r\ntype MyTextFieldProps = {\r\n  label?: string;\r\n  placeholder: string;\r\n} & FieldAttributes<{}>;\r\n\r\nconst MyTextField: React.FC<MyTextFieldProps> = ({\r\n  label,\r\n  placeholder,\r\n  ...props\r\n}) => {\r\n  const [field, meta] = useField<{}>(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n  return (\r\n    <TextField\r\n      placeholder={placeholder}\r\n      {...field}\r\n      value={field.value || \"\"}\r\n      helperText={errorText}\r\n      autoComplete=\"off\"\r\n      error={!!errorText}\r\n      fullWidth\r\n      label={!!label ? label : null}\r\n    />\r\n  );\r\n};\r\n\r\n// type MyAutoCompleteTextFieldProps = {\r\n//   label?: string;\r\n//   // placeholder: string;\r\n// } & FieldAttributes<{}> &\r\n//   RenderInputParams;\r\n\r\n// const MyAutoCompleteTextField: React.FC<MyAutoCompleteTextFieldProps> = ({\r\n//   label,\r\n//   placeholder,\r\n//   ...props\r\n// }) => {\r\n//   console.log(\"MyAutoCompleteTextField: props\", props);\r\n\r\n//   const [field, meta] = useField<{}>(props);\r\n//   console.log(\"MyAutoCompleteTextField: field\", field);\r\n\r\n//   const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n//   return (\r\n//     <TextField\r\n//       // placeholder={placeholder}\r\n//       {...field}\r\n//       value={field.value || \"\"}\r\n//       // helperText={errorText}\r\n//       // autoComplete=\"off\"\r\n//       // error={!!errorText}\r\n//       fullWidth\r\n//       label={!!label ? label : null}\r\n//     />\r\n//   );\r\n// };\r\nconst validationSchema = yup.object({\r\n  venue: yup.string().required(),\r\n  date: yup.date().required(),\r\n  artists: yup.array().of(\r\n    yup.object({\r\n      name: yup.string().required(),\r\n    })\r\n  ).required(\"please add at least one artist\"),\r\n});\r\n\r\ninterface Props extends RouteComponentProps<{}> {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\ninterface RouteParams {\r\n  id?: string;\r\n}\r\n\r\nconst EditGigDetails: React.FC<Props> = ({\r\n  isDarkMode,\r\n  setIsDarkMode,\r\n  history,\r\n}) => {\r\n  const routeParams = useParams<RouteParams>();\r\n\r\n  // const [isDarkMode, setIsDarkMode] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [id] = useState(routeParams.id);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [],\r\n  });\r\n\r\n  const [knownVenues, setKnownVenues] = useState<string[]>([]);\r\n  const [knownArtists, setKnownArtists] = useState<string[]>([]);\r\n\r\n  // const haveId = !!id;\r\n\r\n  // const theme = createMuiTheme({\r\n  //   palette: {\r\n  //     type: isDarkMode ? \"dark\" : \"light\",\r\n\r\n  //     primary: blue,\r\n  //     secondary: blue,\r\n  //   },\r\n  // });\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      // https://firebase.google.com/docs/firestore/use-rest-api#making_rest_calls\r\n      // https://firebase.google.com/docs/reference/rest/database/\r\n      // const url = `https://show01-cd72d.firebaseio.com/.json?print=pretty`;\r\n      const url = `https://gigs01-default-rtdb.europe-west1.firebasedatabase.app/.json?print=pretty`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      const isCleanupRequired = true;\r\n\r\n      if (isCleanupRequired) {\r\n        const filteredResponse: ShowsInfo = {\r\n          lastUpdated: response.lastUpdated,\r\n          shows: [...response.shows.filter(show => show.id !== \"36975dc3-5479-468b-abd2-b5407c01a695\")]\r\n        };\r\n\r\n        setShowsInfo(filteredResponse);\r\n        setUniqueArtistNames(filteredResponse);\r\n        setUniqueVenueNames(filteredResponse);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      setShowsInfo(response);\r\n      setUniqueArtistNames(response);\r\n      setUniqueVenueNames(response);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  const sortStrings = (a: string, b: string) => {\r\n    a = a.toLowerCase();\r\n    b = b.toLowerCase();\r\n    return a > b ? 1 : a < b ? -1 : 0;\r\n  };\r\n\r\n  const setUniqueVenueNames = (showsInfo: ShowsInfo) => {\r\n    if (!showsInfo) {\r\n      return;\r\n    }\r\n\r\n    const showsVenuesNames = showsInfo.shows.map((show) => show.venue);\r\n\r\n    const uniqueShowsVenueNames = Array.from(\r\n      new Set(showsVenuesNames.map((item: string) => item))\r\n    );\r\n\r\n    uniqueShowsVenueNames.sort(sortStrings);\r\n\r\n    setKnownVenues(uniqueShowsVenueNames);\r\n  };\r\n\r\n  const setUniqueArtistNames = (showsInfo: ShowsInfo) => {\r\n    if (!showsInfo) {\r\n      return;\r\n    }\r\n\r\n    const showsArtistNamesNested = showsInfo.shows.map((show) =>\r\n      show.artists.map((artist) => artist.name)\r\n    );\r\n\r\n    const showsArtistNames = flattenNestedArray(showsArtistNamesNested);\r\n\r\n    const uniqueShowsArtistNames = Array.from(\r\n      new Set(showsArtistNames.map((item: string) => item))\r\n    );\r\n\r\n    uniqueShowsArtistNames.sort(sortStrings);\r\n\r\n    setKnownArtists(uniqueShowsArtistNames);\r\n  };\r\n\r\n  const sortShows = (showsInfo: ShowsInfo): void => {\r\n    showsInfo.shows.sort((lhs: Show, rhs: Show) => {\r\n      const lhsDate = new Date(lhs.date);\r\n      const rhsDate = new Date(rhs.date);\r\n\r\n      // const result = lhsDate.getTime() - rhsDate.getTime();\r\n      const lhsTime = lhsDate.getTime();\r\n      const rhsTime = rhsDate.getTime();\r\n\r\n      if (lhsTime === rhsTime) {\r\n        if (lhs.id === undefined && rhs.id === undefined) {\r\n          return 0;\r\n        }\r\n\r\n        if (lhs.id === undefined) {\r\n          return -1;\r\n        }\r\n\r\n        if (rhs.id === undefined) {\r\n          return 1;\r\n        }\r\n\r\n        return lhs.id < rhs.id ? -1 : lhs.id > rhs.id ? 1 : 0;\r\n      } else {\r\n        return lhsTime - rhsTime;\r\n      }\r\n    });\r\n  };\r\n\r\n  const putShowsInfo = async (showsInfo: ShowsInfo) => {\r\n    // const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n    const url = `https://gigs01-default-rtdb.europe-west1.firebasedatabase.app/.json`;\r\n\r\n    // const responseJson = await fetch(url);\r\n\r\n    // const response: ShowsInfo = await responseJson.json();\r\n\r\n    const putMethod = {\r\n      method: \"PUT\", // Method itself\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\", // Indicates the content\r\n      },\r\n      body: JSON.stringify(showsInfo), // We send data in JSON format\r\n    };\r\n\r\n    fetch(url, putMethod)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"PUT Success\", data);\r\n        history.goBack();\r\n      }) // Manipulate the data retrieved back, if we want to do something with it\r\n      .catch((err) => console.log(\"PUT error\", err)); // Do something with the error\r\n  };\r\n\r\n  const submitShow = (show: Show) => {\r\n    // setIsLoading(true);\r\n    // this.errorMessage = null;\r\n\r\n    // const showJson = this.profileFormJson;\r\n    // const show = JSON.parse(showJson);\r\n\r\n    console.log(\"submitShow\", show);\r\n\r\n    const isCleanupRequired = false;\r\n    // 8ace1534-45fe-44e6-8889-c8175095e20c\r\n    // 0b053262-6da0-4fd0-b3bf-e293e897ecec\r\n    if (isCleanupRequired) {\r\n      const cleanupShowIndex = showsInfo.shows.findIndex(\r\n        (showCandidate) =>\r\n          showCandidate.id === \"0b053262-6da0-4fd0-b3bf-e293e897ecec\"\r\n      );\r\n\r\n      if (cleanupShowIndex > -1) {\r\n        showsInfo.shows[cleanupShowIndex].addedDate = new Date(\"2020-01-14\");\r\n      }\r\n    }\r\n\r\n    const isNewShow = !show.id;\r\n\r\n    if (isNewShow) {\r\n      show.id = v4();\r\n      show.addedDate = new Date(new Date().toISOString().substring(0, 10));\r\n    }\r\n\r\n    const existingShowIndex = showsInfo.shows.findIndex(\r\n      (showCandidate) => showCandidate.id === show.id\r\n    );\r\n\r\n    if (!isNewShow) {\r\n      showsInfo.shows[existingShowIndex] = { ...show };\r\n      showsInfo.shows[existingShowIndex].artists = [...show.artists];\r\n    }\r\n\r\n    const existingShow = showsInfo.shows[existingShowIndex];\r\n    console.log(\"Submit Show\", existingShow);\r\n\r\n    let nextShow = isNewShow ? show : showsInfo.shows[existingShowIndex];\r\n\r\n    if (nextShow) {\r\n      nextShow.date = new Date(\r\n        new Date(nextShow.date).toISOString().substring(0, 10)\r\n      );\r\n\r\n      if (nextShow.notes !== undefined) {\r\n        nextShow.notes =\r\n          nextShow.notes.trim() === \"\" ? undefined : nextShow.notes.trim();\r\n      }\r\n\r\n      if (nextShow.priceText !== undefined) {\r\n        nextShow.priceText =\r\n          nextShow.priceText.trim() === \"\"\r\n            ? undefined\r\n            : nextShow.priceText.trim();\r\n      }\r\n\r\n      nextShow.artists = nextShow.artists.map((artist) => {\r\n        const nextArtist = { ...artist };\r\n\r\n        if (artist.stageTime !== undefined) {\r\n          nextArtist.stageTime =\r\n            artist.stageTime.trim() === \"\"\r\n              ? undefined\r\n              : artist.stageTime.trim();\r\n        }\r\n\r\n        if (artist.videoUrl !== undefined) {\r\n          nextArtist.videoUrl =\r\n            artist.videoUrl.trim() === \"\" ? undefined : artist.videoUrl.trim();\r\n        }\r\n\r\n        nextArtist.id = undefined;\r\n\r\n        return nextArtist;\r\n      });\r\n    }\r\n\r\n    const nextShows = isCleanupRequired\r\n      ? [\r\n        ...showsInfo.shows.filter(\r\n          (show) => show.id !== \"8ace1534-45fe-44e6-8889-c8175095e20c\"\r\n        ),\r\n      ]\r\n      : [...showsInfo.shows];\r\n\r\n    const nextShowsInfo = {\r\n      ...showsInfo,\r\n      shows: [...nextShows],\r\n    };\r\n\r\n    nextShowsInfo.lastUpdated = new Date(\r\n      new Date().toISOString().substring(0, 10)\r\n    );\r\n\r\n    if (isNewShow && nextShow) {\r\n      nextShowsInfo.shows.push(nextShow);\r\n\r\n    }\r\n    sortShows(nextShowsInfo);\r\n    putShowsInfo(nextShowsInfo);\r\n    // console.log(\"submitShow: nextShowsInfo\", JSON.stringify(nextShowsInfo, null, 2));\r\n\r\n    // history.goBack();\r\n\r\n    // setShowsInfo(nextShowsInfo);\r\n  };\r\n\r\n  const getShowById = (id: string) => {\r\n    const idMatch = showsInfo.shows.find((show) => show.id && show.id === id);\r\n\r\n    return idMatch;\r\n  };\r\n\r\n  const show = !!id ? getShowById(id) : null;\r\n\r\n  const initialValues: Show = show\r\n    ? show\r\n    : {\r\n      // id: v4(),\r\n      addedDate: new Date(),\r\n      venue: \"\",\r\n      date: new Date(),\r\n      notes: \"\",\r\n      priceText: \"\",\r\n      isSoldOut: false,\r\n      isCancelled: false,\r\n      artists: [\r\n        { name: \"\", stageTime: \"\", videoUrl: \"\", id: \"\" + Math.random() },\r\n      ],\r\n    };\r\n\r\n  // console.log(\"initialValues\", initialValues);\r\n\r\n  // const theme = useTheme();\r\n\r\n  return isLoading ? (\r\n    <Backdrop open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  ) : (\r\n    // <Container maxWidth={false}>\r\n    // <ThemeProvider theme={theme}>\r\n    <Paper elevation={0} square style={{ height: \"100%\" }}>\r\n      <Grid container direction=\"column\">\r\n        <Grid item>\r\n          <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n        </Grid>\r\n        <Grid item container alignContent=\"stretch\">\r\n          <Grid item xs={12}>\r\n            <div style={{ margin: 15 }}>\r\n              <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(data, { setSubmitting, resetForm }) => {\r\n                  setSubmitting(true);\r\n\r\n                  // Make async call\r\n                  console.log(\"submit\", data);\r\n                  submitShow(data);\r\n\r\n                  setSubmitting(false);\r\n                }}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  isSubmitting,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                }) => (\r\n                  <Grid container>\r\n                    <Grid item xs={12}>\r\n                      <Form>\r\n                        <Grid container spacing={2} direction=\"column\">\r\n                          {/* <Grid item>\r\n                                {JSON.stringify(values.date)}\r\n                              </Grid> */}\r\n                          <Grid item>\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                              <Field\r\n                                component={KeyboardDatePicker}\r\n                                autoOk\r\n                                name=\"date\"\r\n                                label={`Event Date ${new Date(values.date).getUTCDate() <= new Date().getUTCDate() ? \" : (FYI: Date is not in the future!!!)\" : \"\"}`}\r\n                                disableToolbar\r\n                                variant=\"inline\"\r\n                                format=\"dd MMMM yyyy\"\r\n                                fullWidth\r\n                              />\r\n                            </MuiPickersUtilsProvider>\r\n                          </Grid>\r\n                          <Grid item>\r\n                            <Field\r\n                              name=\"venue\"\r\n                              component={FormikAutocomplete}\r\n                              label=\"Venue\"\r\n                              options={\r\n                                knownVenues.map((venue) => {\r\n                                  return {\r\n                                    text: venue,\r\n                                  };\r\n                                }) as StringOptionType[]\r\n                              }\r\n                              textFieldProps={{ fullWidth: true }}\r\n                              freeSolo\r\n                              selectOnFocus\r\n                              autoSelect\r\n                            />\r\n                            {/* <MyTextField\r\n                              placeholder=\"venue\"\r\n                              name=\"venue\"\r\n                              type=\"input\"\r\n                              label=\"Venue\"\r\n                            />\r\n                            <Autocomplete\r\n                              freeSolo\r\n                              options={knownVenues.map((option) => option)}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  name=\"venue\"\r\n                                  value={values.venue || \"\"}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              )}\r\n                            /> */}\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          direction=\"column\"\r\n                          style={{ marginTop: 10 }}\r\n                        >\r\n                          <Grid item container>\r\n                            <Grid item xs={12}>\r\n                              <FieldArray name=\"artists\">\r\n                                {(arrayHelpers) => (\r\n                                  <div>\r\n                                    <Grid container direction=\"column\">\r\n                                      <Grid\r\n                                        item\r\n                                        container\r\n                                        justify=\"flex-start\"\r\n                                        alignItems=\"center\"\r\n                                        spacing={2}\r\n                                      >\r\n                                        <Grid item>\r\n                                          <Badge\r\n                                            badgeContent={values.artists.length}\r\n                                            color=\"primary\"\r\n                                            showZero\r\n                                          >\r\n                                            <Typography>Artists</Typography>\r\n                                          </Badge>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                          <IconButton\r\n                                            aria-label=\"add\"\r\n                                            onClick={() =>\r\n                                              arrayHelpers.push({\r\n                                                name: \"\",\r\n                                                stageTime: \"\",\r\n                                                videoUrl: \"\",\r\n                                                id: \"\" + Math.random(),\r\n                                              })\r\n                                            }\r\n                                          >\r\n                                            <PersonAddIcon />\r\n                                          </IconButton>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                          {\r\n                                            errors && errors.artists && (typeof errors.artists === \"string\") &&\r\n                                            <p style={{ color: \"red\", fontSize: \"0.75rem\", fontWeight: 400 }}>{errors.artists}</p>\r\n                                          }\r\n                                          {/* <span style={{ color: \"red\" }}>{errors.artists}</span> */}\r\n                                        </Grid>\r\n                                      </Grid>\r\n                                      <div\r\n                                      // item\r\n                                      // container\r\n                                      // xs={12}\r\n                                      // style={{\r\n                                      //   border: \"5px solid black\",\r\n                                      //   padding: 30,\r\n                                      // }}\r\n                                      >\r\n                                        {values.artists.map((artist, index) => {\r\n                                          const nameName = `artists.${index}.name`;\r\n                                          const stageTimeName = `artists.${index}.stageTime`;\r\n                                          // const videoUrlName = `artists.${index}.videoUrl`;\r\n\r\n                                          return (\r\n                                            <Grid\r\n                                              item\r\n                                              container\r\n                                              xs={12}\r\n                                              key={artist.id || Math.random()}\r\n                                              spacing={2}\r\n                                            >\r\n                                              <Grid item xs={9} sm={6}>\r\n                                                {/* <MyTextField\r\n                                                  placeholder=\"artist name\"\r\n                                                  name={nameName}\r\n                                                /> */}\r\n                                                <Field\r\n                                                  name={nameName}\r\n                                                  component={FormikAutocomplete}\r\n                                                  label=\"Name\"\r\n                                                  options={\r\n                                                    knownArtists.map(\r\n                                                      (artistName) => {\r\n                                                        return {\r\n                                                          text: artistName,\r\n                                                        };\r\n                                                      }\r\n                                                    ) as StringOptionType[]\r\n                                                  }\r\n                                                  selectOnFocus\r\n                                                  freeSolo\r\n                                                  textFieldProps={{\r\n                                                    fullWidth: true,\r\n                                                  }}\r\n                                                />\r\n                                              </Grid>\r\n\r\n                                              <Hidden smDown>\r\n                                                <Grid item xs={3}>\r\n                                                  <MyTextField\r\n                                                    placeholder=\"stage time\"\r\n                                                    name={stageTimeName}\r\n                                                  />\r\n                                                </Grid>\r\n                                              </Hidden>\r\n                                              {/* <Hidden smDown>\r\n                                                    <Grid item xs={3}>\r\n                                                      <MyTextField\r\n                                                        placeholder=\"video url\"\r\n                                                        name={videoUrlName}\r\n                                                      />\r\n                                                    </Grid>\r\n                                                  </Hidden> */}\r\n\r\n                                              <Grid item xs={3}>\r\n                                                <IconButton\r\n                                                  size=\"small\"\r\n                                                  aria-label=\"delete\"\r\n                                                  onClick={() =>\r\n                                                    arrayHelpers.remove(index)\r\n                                                  }\r\n                                                >\r\n                                                  <DeleteIcon />\r\n                                                </IconButton>\r\n                                              </Grid>\r\n                                            </Grid>\r\n                                          );\r\n                                        })}\r\n                                      </div>\r\n                                    </Grid>\r\n                                  </div>\r\n                                )}\r\n                              </FieldArray>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          spacing={2}\r\n                          direction=\"column\"\r\n                          style={{ marginTop: 15 }}\r\n                        >\r\n                          <Grid item>\r\n                            <MyTextField\r\n                              placeholder=\"notes\"\r\n                              name=\"notes\"\r\n                              type=\"input\"\r\n                              label=\"Notes\"\r\n                            />\r\n                          </Grid>\r\n                          <Grid item>\r\n                            <MyTextField\r\n                              placeholder=\"price\"\r\n                              name=\"priceText\"\r\n                              type=\"input\"\r\n                              label=\"Price\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <MyCheckbox\r\n                          name=\"isSoldOut\"\r\n                          type=\"checkbox\"\r\n                          label=\"Sold Out?\"\r\n                        />\r\n\r\n                        <MyCheckbox\r\n                          name=\"isCancelled\"\r\n                          type=\"checkbox\"\r\n                          label=\"Cancelled?\"\r\n                        />\r\n\r\n                        <Grid\r\n                          item\r\n                          container\r\n                          justify=\"flex-end\"\r\n                          style={{ paddingTop: 5 }}\r\n                        >\r\n                          <Button\r\n                            disabled={isSubmitting}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                          >\r\n                            save\r\n                          </Button>\r\n                        </Grid>\r\n                      </Form>\r\n                    </Grid>\r\n                    <Grid item xs={12} container direction=\"column\">\r\n                      {/* <Grid item>\r\n                            <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                          </Grid>\r\n                          <Grid item>\r\n                            <pre>{JSON.stringify(errors, null, 2)}</pre>\r\n                          </Grid> */}\r\n                      {/* <Grid item>\r\n                        <pre>{JSON.stringify(knownVenues, null, 2)}</pre>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <pre>{JSON.stringify(knownArtists, null, 2)}</pre>\r\n                      </Grid> */}\r\n                    </Grid>\r\n                  </Grid>\r\n                )}\r\n              </Formik>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n    // </ThemeProvider>\r\n    // </Container>\r\n  );\r\n};\r\n\r\nexport default EditGigDetails;\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n// import { blue, green, amber, blueGrey, red, cyan, indigo, lightBlue, grey, teal } from \"@material-ui/core/colors\";\r\n\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport Home from \"./components/Home\";\r\nimport GigList from \"./components/GigList\";\r\nimport GigDetails from \"./components/GigDetails\";\r\nimport EditGigDetails from \"./components/EditGigDetails\";\r\n\r\nconst App: React.FC = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: isDarkMode ? \"dark\" : \"light\",\r\n      primary: {\r\n        main: \"#0b5994\",\r\n      },\r\n      secondary: {\r\n        main: \"#1d83c6\",\r\n      },\r\n    },\r\n  });\r\n\r\n  // const theme = createMuiTheme({\r\n  //   palette: {\r\n  //     type: isDarkMode ? \"dark\" : \"light\",\r\n  //     primary: blue,\r\n  //     secondary: blue,\r\n  //   },\r\n  // });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          {/* <Route path=\"/\" exact component={Home} /> */}\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n\r\n          <Route\r\n            path=\"/giglist/:showPastEvents/:days?\"\r\n            render={() => (\r\n              <GigList isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n\r\n          <Route path=\"/gigdetails/:id\" render={() => <GigDetails />} />\r\n          <Route\r\n            path=\"/editgigdetails/:id?\"\r\n            render={({ history, location, match }) => (\r\n              <EditGigDetails\r\n                isDarkMode={isDarkMode}\r\n                setIsDarkMode={setIsDarkMode}\r\n                history={history}\r\n                location={location}\r\n                match={match} />\r\n            )}\r\n          />\r\n\r\n          {/* <Route path=\"/\" render={() => <div>404</div>} /> */}\r\n          <Route\r\n            path=\"*\"\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}